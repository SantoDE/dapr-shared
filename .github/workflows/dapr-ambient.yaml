#
# Copyright 2021 The Dapr Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: dapr-ambient-init

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*
permissions:
  contents: write

jobs:
  build:
    name: "Build artifacts on ${{ matrix.job_name }}"
    runs-on: "${{ matrix.os }}"
    env:
      GOOS: "${{ matrix.target_os }}"
      GOARCH: "${{ matrix.target_arch }}"
      GOPROXY: "https://proxy.golang.org"
      ARCHIVE_OUTDIR: "dist/archives"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target_os: linux
            target_arch: amd64
            job_name: "Linux/amd64"
          - os: ubuntu-latest
            target_os: linux
            target_arch: arm64
            job_name: "Linux/arm64"
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        # if: matrix.target_os == 'linux' && github.event_name != 'pull_request'
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # if: matrix.target_os == 'linux' && github.event_name != 'pull_request'
        with:
          version: v0.10.1 # Don't use latest since it broke our workflow once
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Parse release version and set REL_VERSION and LATEST_RELEASE
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}
      - name: Updates version
        run: |
          echo "REL_VERSION=${REL_VERSION}" >>${GITHUB_ENV}
          echo "BINARIES=daprd" >>${GITHUB_ENV}
        shell: bash
      - name: Set REPO_OWNER
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          # Lowercase the value
          echo "REPO_OWNER=${REPO_OWNER,,}" >>${GITHUB_ENV}
        shell: bash
      - name: Cache Go modules (Linux)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ steps.setup-go.outputs.go-version }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ steps.setup-go.outputs.go-version }}-build-
      - name: Run make release to build and archive binaries
        env:
          GOOS: ${{ matrix.target_os }}
          GOARCH: ${{ matrix.target_arch }}
          ARCHIVE_OUT_DIR: ${{ env.ARCHIVE_OUTDIR }}
        run: |
          mkdir -p "${ARCHIVE_OUT_DIR}"
          make release
        shell: bash
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: dapr-ambient_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARCHIVE_OUTDIR }}

  publish:
    name: Publish binaries
    needs: build
    if: github.event_name != 'pull_request'
    env:
      ARTIFACT_DIR: ./release
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Parse release version and set REL_VERSION and LATEST_RELEASE
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}
      - name: Set REPO_OWNER
        shell: bash
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          # Lowercase the value
          echo "REPO_OWNER=${REPO_OWNER,,}" >>${GITHUB_ENV}
      - name: "download artifact: dapr-ambient_linux_amd64"
        uses: actions/download-artifact@master
        with:
          name: dapr-ambient_linux_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: "download artifact: dapr-ambient_linux_arm64"
        uses: actions/download-artifact@master
        with:
          name: dapr-ambient_linux_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: generate checksum files
        run: cd ${ARTIFACT_DIR} && for i in *; do sha256sum -b $i > "$i.sha256"; done && cd -
      - name: lists artifacts
        run: ls -l ${{ env.ARTIFACT_DIR }}
      - name: publish binaries to github
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          echo "installing github-release-cli..."
          sudo npm install --silent --no-progress -g github-release-cli@2.1.0
          if [ "$LATEST_RELEASE" = "true" ]; then
            export RELEASE_BODY=`cat ./docs/release_notes/v${REL_VERSION}.md`
          else
            export RELEASE_BODY="This is the release candidate ${REL_VERSION}"
          fi
          # Get the list of files
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)
          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          export GITHUB_TOKEN=${{ secrets.DAPR_BOT_TOKEN }}
          echo "Uploading Dapr-Ambient Runtime Binaries to GitHub Release"
          github-release upload \
            --owner $OWNER_NAME \
            --repo $REPO_NAME \
            --tag "v${REL_VERSION}" \
            --release-name "Dapr-Ambient Runtime v${REL_VERSION}" \
            --body "${RELEASE_BODY}" \
            --prerelease true \
            ${RELEASE_ARTIFACT[*]}
        shell: bash

# NEEDS MODIFICATION: PUSH TO ALL NECESSARY DOCKER REPOSITORIES
  docker-publish:
    name: Publish docker images
    needs: build
    # if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_os: ["linux"]
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Parse release version and set REL_VERSION and LATEST_RELEASE
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}

      - name: Set REPO_OWNER
        shell: bash
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          # Lowercase the value
          echo "REPO_OWNER=${REPO_OWNER,,}" >>${GITHUB_ENV}

      - name: GitHub Container Registry login
        uses: docker/login-action@v2
        if: matrix.target_os != 'darwin'
        with:
          registry: ${{ var.DOCKER_DAPRIO_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_ID }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

  helm:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: checkout
        uses: actions/checkout@v3
      
      - name: Parse release version and set REL_VERSION and LATEST_RELEASE
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}
      
      - name: setup helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm

      - name: install helm
        run: helm plugin install https://github.com/quintush/helm-unittest
      
      - name: execute unit tests
        run: helm unittest chart/dapr-ambient

      - name: update docs
        if: github.ref == 'refs/heads/main'
        run: |
          wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
          tar -zxf helm-docs_1.11.0_Linux_x86_64.tar.gz
          ./helm-docs

      - name: commit and push changes
        if: github.ref == 'refs/heads/main'
        env:
          COMMIT_MESSAGE: "docs: update README.md"
          COMMIT_AUTHOR: dapr-ambient-bot
        run: |
          mv chart/dapr-ambient/README.md README.md
          git config --global user.name "${{ env.COMMIT_AUTHOR }}"
          git config --global user.email "dapr-ambient-bot@diagrid.com"
          git add README.md
          git commit -m "${{ env.COMMIT_MESSAGE }}"
          git push origin ${{ github.head_ref || github.ref_name }}
      
      # NEEDS MODIFICATION: PUSH TO AZURE ECR
      - name: Package & Push Helm Chart
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run : |
          helm package \
          ./chart/dapr-ambient \
          --version ${RELEASE_VERSION}
          helm push "${RELEASE_NAME}-${RELEASE_VERSION}.tgz" oci://${{ secrets.DOCKER_REGISTRY }}
        shell: bash